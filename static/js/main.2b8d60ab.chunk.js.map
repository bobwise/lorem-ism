{"version":3,"sources":["components/IconSet/IconSet.js","App.js","serviceWorker.js","index.js"],"names":["IconSet","state","icons","fetch","then","r","text","setState","window","dispatchEvent","CustomEvent","this","dangerouslySetInnerHTML","__html","React","Component","MarkovChain","require","App","props","subtitleRef","createRef","outputRef","generateRandomIsm","bind","generateIsmBlock","current","innerText","seed","seedFile","isms","join","start","wordList","tmpList","Object","keys","filter","word","Math","random","length","end","process","sentence_count","output","x","className","ref","splitAt","additionalClasses","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2/BA2BeA,G,kBAvBb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CAAEC,MAAO,IAFV,E,iFAKO,IAAD,OAClBC,MAAM,oGACHC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAACE,GACL,EAAKC,SAAS,CAAEL,MAAOI,OACtBF,MAAK,WACNI,OAAOC,cAAc,IAAIC,YAAY,sB,+BAIjC,IACAR,EAAUS,KAAKV,MAAfC,MACR,OACE,yBAAKU,wBAAyB,CAAEC,OAAQX,S,GAnBxBY,IAAMC,Y,eCGxBC,EAAcC,EAAQ,IAiFXC,E,YA9Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,YAAcN,IAAMO,YACzB,EAAKC,UAAYR,IAAMO,YAEvB,EAAKE,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAPP,E,iFAWjBb,KAAKS,YAAYM,QAAQC,UAAY,IAAOhB,KAAKY,oBAAsB,M,0CAIvE,IAAIK,EAAOC,EAASC,KAAKC,KAAK,KAc9B,OAZa,IAAIf,EAAYY,GAG1BI,OACC,SAACC,GACC,IAAIC,EAAUC,OAAOC,KAAKH,GAAUI,QAAO,SAAUC,GACnD,OAAOA,EAAK,IAAM,KAAOA,EAAK,IAAM,OAEtC,OAAOJ,KAAWK,KAAKC,SAAWN,EAAQO,YAE5CC,MAAMC,UAAY,M,uCAKPC,GAGf,IAFA,IAAIC,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAgBE,IAClCD,GAAUlC,KAAKY,oBACfsB,GAAU,IAGZ,OAAOA,I,+BAGC,IAAD,OACP,OACE,0BAAME,UAAU,oCACd,kBAAC,EAAD,MACA,wBAAIA,UAAU,0CAAd,aACA,wBAAIC,IAAKrC,KAAKS,YAAa2B,UAAU,8DAArC,aACA,uBAAIA,UAAU,iCAAd,uFACA,6BAEA,kBAAC,IAAD,CAAWE,QAAQ,SACjB,kBAAC,IAAD,CAAeC,kBAAkB,gCAC/B,kBAAC,IAAD,CAAYA,kBAAkB,8CAA8CC,QAAS,WACnF,EAAK7B,UAAUI,QAAQC,UAAY,EAAKF,iBAAiB,KAD3D,mBAIF,kBAAC,IAAD,CAAeyB,kBAAkB,gCAC/B,kBAAC,IAAD,CAAYA,kBAAkB,8CAA8CC,QAAS,WACnF,EAAK7B,UAAUI,QAAQC,UAAY,EAAKF,iBAAiB,MAD3D,gBAIF,kBAAC,IAAD,CAAeyB,kBAAkB,gCAC/B,kBAAC,IAAD,CAAYA,kBAAkB,8CAA8CC,QAAS,WACnF,EAAK7B,UAAUI,QAAQC,UAAY,EAAKF,iBAAiB,IAAM,OAAS,EAAKA,iBAAiB,IAAM,OAAS,EAAKA,iBAAiB,MADrI,kBAQJ,uBAAGuB,IAAKrC,KAAKW,UAAWyB,UAAU,+C,GAzExBhC,aCIEqC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,MAAK,SAAA2D,GACjCA,EAAaC,kB","file":"static/js/main.2b8d60ab.chunk.js","sourcesContent":["/* global fetch window CustomEvent */\nimport React from 'react';\n\nclass IconSet extends React.Component {\n  constructor() {\n    super();\n    this.state = { icons: '' };\n  }\n\n  componentDidMount() {\n    fetch('https://www.rockomni.com/mcds/assets/GlobalContent/NonStockImages/Icons/spark-core-icons-V12.svg')\n      .then(r => r.text())\n      .then((text) => {\n        this.setState({ icons: text });\n      }).then(() => {\n        window.dispatchEvent(new CustomEvent('icons-loaded'));\n      });\n  }\n\n  render() {\n    const { icons } = this.state;\n    return (\n      <div dangerouslySetInnerHTML={{ __html: icons }} />\n    );\n  }\n}\n\nexport default IconSet;","import React, { Component } from 'react';\nimport './App.scss';\nimport IconSet from './components/IconSet/IconSet';\nimport { SprkButton, SprkStack, SprkStackItem } from '@sparkdesignsystem/spark-react';\nimport seedFile from './seed.json';\n\nvar MarkovChain = require('markovchain');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.subtitleRef = React.createRef();\n    this.outputRef = React.createRef();\n\n    this.generateRandomIsm = this.generateRandomIsm.bind(this);\n    this.generateIsmBlock = this.generateIsmBlock.bind(this);\n  }\n\n  componentDidMount() {\n    this.subtitleRef.current.innerText = \"\\\"\" + this.generateRandomIsm() + \"\\\"\";\n  }\n\n  generateRandomIsm() {\n    var seed = seedFile.isms.join(' ');\n\n    var quotes = new MarkovChain(seed);\n\n    var output = quotes\n      .start(\n        (wordList) => {\n          var tmpList = Object.keys(wordList).filter(function (word) {\n            return word[0] >= 'A' && word[0] <= 'Z'\n          })\n          return tmpList[~~(Math.random() * tmpList.length)]\n        }\n      ).end().process() + \".\";\n\n    return (output);\n  }\n\n  generateIsmBlock(sentence_count) {\n    var output = \"\";\n\n    for (var x = 0; x < sentence_count; x++) {\n      output += this.generateRandomIsm();\n      output += \" \";\n    }\n\n    return output;\n  }\n\n  render() {\n    return (\n      <main className=\"sprk-o-CenteredColumn sprk-u-pal\">\n        <IconSet></IconSet>\n        <h1 className=\"sprk-b-TypeDisplayTwo sprk-b-PageTitle\">Lorem Ism</h1>\n        <h1 ref={this.subtitleRef} className=\"sprk-b-TypeDisplayFive sprk-u-FontStyle--italic sprk-u-mvm\">Lorem Ism</h1>\n        <p  className=\"sprk-b-TypeBodyTwo sprk-u-mvl\">Tired of pseudo-Latin? Spice up your mockups with this ISM-inspired text generator!</p>\n        <hr />\n\n        <SprkStack splitAt=\"small\">\n          <SprkStackItem additionalClasses=\"sprk-o-Stack__item--third@xs\">\n            <SprkButton additionalClasses=\"sprk-u-mrm sprk-u-mbm sprk-c-Button--full@s\" onClick={() => {\n              this.outputRef.current.innerText = this.generateIsmBlock(1);\n            }}>Make me an ISM</SprkButton>\n          </SprkStackItem>\n          <SprkStackItem additionalClasses=\"sprk-o-Stack__item--third@xs\">\n            <SprkButton additionalClasses=\"sprk-u-mrm sprk-u-mbm sprk-c-Button--full@s\" onClick={() => {\n              this.outputRef.current.innerText = this.generateIsmBlock(10);\n            }}>A paragraph</SprkButton>\n          </SprkStackItem>\n          <SprkStackItem additionalClasses=\"sprk-o-Stack__item--third@xs\">\n            <SprkButton additionalClasses=\"sprk-u-mrm sprk-u-mbm sprk-c-Button--full@s\" onClick={() => {\n              this.outputRef.current.innerText = this.generateIsmBlock(10) + \"\\n\\n\" + this.generateIsmBlock(10) + \"\\n\\n\" + this.generateIsmBlock(10);\n            }}>3 paragraphs</SprkButton></SprkStackItem>\n        </SprkStack>\n\n\n\n\n        <p ref={this.outputRef} className=\"sprk-u-mvl sprk-u-pam outputContainer\"></p>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}