{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MarkovChain","require","App","subtitleRef","useRef","outputRef","useEffect","current","innerText","generateRandomIsm","seed","seedFile","isms","join","output","start","wordList","tmpList","Object","keys","filter","word","Math","random","length","end","process","includes","generateIsmBlock","sentence_count","x","className","aria-label","ref","href","target","rel","aria-hidden","splitAt","additionalClasses","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAKIA,EAAcC,EAAQ,IA0EXC,EAxEH,WACV,IAAMC,EAAcC,iBAAO,MACrBC,EAAYD,iBAAO,MAEzBE,qBAAU,WACRH,EAAYI,QAAQC,UAAYC,MAC/B,IAEH,IAAMA,EAAoB,SAApBA,IACJ,IAAIC,EAAOC,EAASC,KAAKC,KAAK,KAI1BC,EAFS,IAAId,EAAYU,GAG1BK,OACC,SAACC,GACC,IAAIC,EAAUC,OAAOC,KAAKH,GAAUI,QAAO,SAAUC,GACnD,OAAOA,EAAK,IAAM,KAAOA,EAAK,IAAM,OAEtC,OAAOJ,KAAWK,KAAKC,SAAWN,EAAQO,YAE5CC,MAAMC,UAAY,IAEtB,OAAIf,EAASC,KAAKe,SAASb,GAElBL,IAGFK,GAGHc,EAAmB,SAACC,GAGxB,IAFA,IAAIf,EAAS,GAEJgB,EAAI,EAAGA,EAAID,EAAgBC,IAClChB,GAAUL,IACVK,GAAU,IAGZ,OAAOA,GAGT,OACE,0BAAMiB,UAAU,oCACd,wBAAIA,UAAU,yCAAyCC,aAAW,aAAlE,aACA,wBAAIC,IAAK9B,EAAa4B,UAAU,8DAAhC,YACA,uBAAGA,UAAU,iCAAb,uFACA,uBAAGA,UAAU,4CAAb,kBACiB,uBAAGA,UAAU,cAAcG,KAAK,mCAAmCC,OAAO,SAASC,IAAI,YAAvF,uBADjB,KAEA,wBAAIC,cAAY,SAChB,kBAAC,YAAD,CAAWC,QAAQ,SACjB,kBAAC,gBAAD,CAAeC,kBAAkB,gCAC/B,kBAAC,aAAD,CAAYP,aAAW,iBAAiBO,kBAAkB,8CAA8CC,QAAS,WAC/GnC,EAAUE,QAAQC,UAAYoB,EAAiB,KADjD,mBAIF,kBAAC,gBAAD,CAAeW,kBAAkB,gCAC/B,kBAAC,aAAD,CAAYA,kBAAkB,8CAA8CC,QAAS,WACnFnC,EAAUE,QAAQC,UAAYoB,EAAiB,MADjD,gBAIF,kBAAC,gBAAD,CAAeW,kBAAkB,gCAC/B,kBAAC,aAAD,CAAYA,kBAAkB,8CAA8CC,QAAS,WACnFnC,EAAUE,QAAQC,UAAYoB,EAAiB,IAAM,OAASA,EAAiB,IAAM,OAASA,EAAiB,MADjH,kBAKJ,uBAAGK,IAAK5B,EAAW0B,UAAU,4CC9DfU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.87b8c276.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './App.scss';\nimport { SprkButton, SprkStack, SprkStackItem } from '@sparkdesignsystem/spark-react';\nimport seedFile from './seed.json';\n\nvar MarkovChain = require('markovchain');\n\nconst App = () => {\n  const subtitleRef = useRef(null)\n  const outputRef = useRef(null)\n\n  useEffect(() => {\n    subtitleRef.current.innerText = generateRandomIsm();\n  }, [])\n\n  const generateRandomIsm = () => {\n    var seed = seedFile.isms.join(' ');\n\n    var quotes = new MarkovChain(seed);\n\n    var output = quotes\n      .start(\n        (wordList) => {\n          var tmpList = Object.keys(wordList).filter(function (word) {\n            return word[0] >= 'A' && word[0] <= 'Z'\n          })\n          return tmpList[~~(Math.random() * tmpList.length)]\n        }\n      ).end().process() + \".\";\n\n    if (seedFile.isms.includes(output)){\n      // this is a dupe; try again\n      return generateRandomIsm();\n    }\n\n    return output;\n  }\n\n  const generateIsmBlock = (sentence_count) => {\n    var output = \"\";\n\n    for (var x = 0; x < sentence_count; x++) {\n      output += generateRandomIsm();\n      output += \" \";\n    }\n\n    return output;\n  }\n\n  return (\n    <main className=\"sprk-o-CenteredColumn sprk-u-pal\">\n      <h1 className=\"sprk-b-TypeDisplayTwo sprk-b-PageTitle\" aria-label=\"Lorem Izm\">Lorem Ism</h1>\n      <h2 ref={subtitleRef} className=\"sprk-b-TypeDisplayFive sprk-u-FontStyle--italic sprk-u-mvm\">Subtitle</h2>\n      <p className=\"sprk-b-TypeBodyTwo sprk-u-mtl\">Tired of pseudo-Latin? Spice up your mockups with this ISM-inspired text generator!</p>\n      <p className=\"sprk-b-TypeBodyTwo sprk-u-mts sprk-u-mbl\">\n        Powered by the <a className=\"sprk-b-Link\" href=\"http://www.sparkdesignsystem.com\" target=\"_blank\" rel=\"noopener\">Spark Design System</a>.</p>\n      <hr aria-hidden=\"true\" />\n      <SprkStack splitAt=\"small\">\n        <SprkStackItem additionalClasses=\"sprk-o-Stack__item--third@xs\">\n          <SprkButton aria-label=\"Make me an izm\" additionalClasses=\"sprk-u-mrm sprk-u-mbm sprk-c-Button--full@s\" onClick={() => {\n            outputRef.current.innerText = generateIsmBlock(1);\n          }}>Make me an ISM</SprkButton>\n        </SprkStackItem>\n        <SprkStackItem additionalClasses=\"sprk-o-Stack__item--third@xs\">\n          <SprkButton additionalClasses=\"sprk-u-mrm sprk-u-mbm sprk-c-Button--full@s\" onClick={() => {\n            outputRef.current.innerText = generateIsmBlock(10);\n          }}>A paragraph</SprkButton>\n        </SprkStackItem>\n        <SprkStackItem additionalClasses=\"sprk-o-Stack__item--third@xs\">\n          <SprkButton additionalClasses=\"sprk-u-mrm sprk-u-mbm sprk-c-Button--full@s\" onClick={() => {\n            outputRef.current.innerText = generateIsmBlock(10) + \"\\n\\n\" + generateIsmBlock(10) + \"\\n\\n\" + generateIsmBlock(10);\n          }}>3 paragraphs</SprkButton></SprkStackItem>\n      </SprkStack>\n\n      <p ref={outputRef} className=\"sprk-u-mvl sprk-u-pam outputContainer\"></p>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}